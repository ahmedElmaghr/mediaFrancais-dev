{"version":3,"sources":["Utils/StringUtils.js","MediaFrancais/MediaFrancaisView.js","Components/DropDownView.js","Components/FileUpload.js","MediaFrancais/MediaFrancaisContainer.js","App.js","serviceWorker.js","index.js","MediaFrancais/data/countries.tsv","MediaFrancais/data/medias_francais_mock.tsv","MediaFrancais/data/relations_medias_francais.tsv"],"names":["StringUtils","isNotEmpty","entity","MediaFrancaisView","props","console","log","width","height","scale","lastX","lastY","origin","x","y","viewBox","borderColor","mergeMorrocanSahara","g","jsonData","morocco","objects","countries","geometries","filter","d","id","morrocanSahara","toBeMerged","append","datum","merge","attr","calculatePath","initMarkersAndLinks","d3","remove","showMarkersOnFirstOrder","raise","drawMediaAndConnexions","medias_francais","relations_medias_francais","gGlobal","drawMediaPosition","drawCnx","addZoom","drawMap","node","worldData","state","isMapLoaded","selectAll","data","enter","i","length","markers","media_francais_filtre","country","getCx","getCy","getChildCount","nom","getNodeColor","text","e","circleOnHover","c","coordinate","latitude","longitude","projection","media","childsCount","origine","relations","links","buildLinks","addLinks","forEach","link","createLinkObject","validateLink","push","value","getCoordinateByEntity","cible","lien","valeur","etat","linkOrigineCoordinate","linkCibleCoordinate","entityName","countryFromMedia","m","cx","drawLink","line","curve","context","custom","_context","point","this","_point","_line","lineTo","moveTo","x0","y0","x1","y1","k","Math","sqrt","Infinity","quadraticCurveTo","style","colorPath","svg","call","on","zoomed","transform","event","circleOnClick","drawSvgWrapper","setState","media_filtred","geoMercator","translate","precision","center","PureComponent","DorpDownView","className","onChange","target","Component","FileUpload","class","onClick","onClickHandler","type","aria-describedby","uploadFile","for","MediaFrancaisContainer","FormData","selectedFile","axios","post","then","res","status","filename","readMediaFile","statusText","file","files","changeTheme","theme","media_francais","mediaFiltered","response","readRelationFile","relations_medias_francais_mock","readCountries","loadDataForMediaFrancais","selected","medias_francais_mock","updateWordMap","fetch","json","feature","features","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.bf13f93e.chunk.js","sourcesContent":["export class StringUtils {\r\n  //verify string not empty\r\n  static isNotEmpty = entity => {\r\n    return entity != \"\" && entity != \"\" && entity != null;\r\n  };\r\n}\r\n","import * as d3 from \"d3\";\r\nimport React, { PureComponent  } from \"react\";\r\nimport { merge} from \"topojson-client\"\r\nimport {StringUtils} from \"../Utils/StringUtils.js\"\r\nimport \"./MediaFrancaisView.css\"\r\n\r\nexport default class MediaFrancaisView extends PureComponent {\r\n                 //Constantes\r\n\r\n                 width = \"100%\";\r\n                 height = \"100%\";\r\n                 scale = 250;\r\n                 lastX = 0;\r\n                 lastY = 0;\r\n                 origin = {\r\n                   x: 55,\r\n                   y: -40\r\n                 };\r\n                 viewBox = \"0 0 800 450\";\r\n                 borderColor = \"red\";\r\n\r\n                 constructor(props) {\r\n                   console.log(\"call the constructor MediaFrancaisView\");\r\n                   super(props);\r\n                   this.state = {\r\n                     medias_francais: [],\r\n                     isMapLoaded: false\r\n                   };\r\n                 }\r\n\r\n                 componentWillReceiveProps() {\r\n                   console.log(\r\n                     \"call the componentWillReceiveProps MediaFrancaisView\"\r\n                   );\r\n                 }\r\n\r\n                 componentWillMount() {\r\n                   console.log(\"componentWillMount\");\r\n                   //Draw svg Wrapper\r\n                   var svg = this.drawSvgWrapper();\r\n                   var gGlobal = svg.append(\"g\").attr(\"id\", \"gWrapper\");\r\n                   //Draw Path from worldData\r\n                   var g = this.drawMap(gGlobal, this.props.worldData);\r\n                   //Merge morrocan sahara\r\n                   this.mergeMorrocanSahara(g);\r\n                 }\r\n\r\n                 mergeMorrocanSahara = g => {\r\n                   //merge Morocco\r\n                   var jsonData = this.props.jsonData;\r\n                   //Moroccan Sahara id = 732\r\n                   //Morocco id = 504\r\n                   var morocco = jsonData.objects.countries.geometries.filter(\r\n                     d => d.id == 504\r\n                   );\r\n                   var morrocanSahara = jsonData.objects.countries.geometries.filter(\r\n                     d => d.id == 732\r\n                   );\r\n                   var toBeMerged = [morocco[0], morrocanSahara[0]];\r\n                   //\r\n                   g.append(\"path\")\r\n                     .datum(merge(jsonData, toBeMerged))\r\n                     .attr(\"className\", \"country\")\r\n                     .attr(\"d\", d => this.calculatePath(d))\r\n                     .attr(\"stroke\", this.borderColor)\r\n                     .attr(\"stroke-width\", 0.05)\r\n                     .attr(\"fill\", \"rgba(44, 130, 201, 1)\");\r\n                 };\r\n                 componentDidMount() {\r\n                   console.log(\"call the componentDidMount\");\r\n                 }\r\n\r\n                 componentDidUpdate() {\r\n                   console.log(\"call didComponentUpdate\");\r\n                   this.setState({\r\n                     ...this.setState(),\r\n                     medias_francais: this.props.media_filtred\r\n                   });\r\n                 }\r\n\r\n                 render() {\r\n                   this.initMarkersAndLinks();\r\n                   console.log(\"call MediaFrancais render\");\r\n                   const medias_francais = this.state.medias_francais;\r\n                   const {\r\n                     worldData,\r\n                     relations_medias_francais,\r\n                     countries\r\n                   } = this.props;\r\n                   if (worldData.length > 0) {\r\n                     this.drawMediaAndConnexions(\r\n                       medias_francais,\r\n                       relations_medias_francais,\r\n                       countries\r\n                     );\r\n                     this.showMarkersOnFirstOrder();\r\n                   }\r\n                   return <div></div>;\r\n                 }\r\n\r\n                 initMarkersAndLinks = () => {\r\n                   d3.selectAll(\".markers\").remove();\r\n                   d3.selectAll(\".paths\").remove();\r\n                 };\r\n\r\n                 showMarkersOnFirstOrder = () => {\r\n                   d3.select(\".markers\").raise();\r\n                 };\r\n                 //Create the world map\r\n                 drawMediaAndConnexions = (\r\n                   medias_francais,\r\n                   relations_medias_francais,\r\n                   countries\r\n                 ) => {\r\n                   var gGlobal = d3.select(\"#gWrapper\");\r\n                   //Draw Medias\r\n                   this.drawMediaPosition(gGlobal, medias_francais);\r\n                   //Draw connexions\r\n                   this.drawCnx(\r\n                     gGlobal,\r\n                     relations_medias_francais,\r\n                     countries\r\n                   );\r\n                   //add zoom\r\n                   this.addZoom(gGlobal);\r\n                 };\r\n\r\n                 //Draw svg wrapper for map\r\n                 drawSvgWrapper() {\r\n                   //Construct Body\r\n                   var body = d3.select(\"body\");\r\n                   var divGlobal = body\r\n                     .append(\"div\")\r\n                     .attr(\"id\", \"map\")\r\n                     .attr(\"style\", \"border-style:dashed\");\r\n                   //Construct SVG\r\n                   var svg = divGlobal\r\n                     .append(\"svg\")\r\n                     .attr(\"id\", \"content\")\r\n                     .attr(\"width\", this.width)\r\n                     .attr(\"height\", this.height)\r\n                     .attr(\"viewBox\", this.viewBox)\r\n                     .attr(\r\n                       \"transform\",\r\n                       \"translate(\" +\r\n                         this.width / 2 +\r\n                         \",\" +\r\n                         this.height / 2 +\r\n                         \")\"\r\n                     );\r\n                   //Draw G for map\r\n                   return svg;\r\n                 }\r\n\r\n                 //Draw the world Map\r\n                 drawMap = (node, worldData) => {\r\n                   if (!this.state.isMapLoaded) {\r\n                     var g = node\r\n                       .append(\"g\")\r\n                       .attr(\"id\", \"worldMap\")\r\n                       .attr(\"className\", \"countries\");\r\n                     g.selectAll(\"path\")\r\n                       .data(worldData)\r\n                       .enter()\r\n                       .append(\"path\")\r\n                       .attr(\"key\", i => `path-${i}`)\r\n                       .attr(\"d\", d => this.calculatePath(d))\r\n                       .attr(\"className\", \"country\")\r\n                       //.attr(\"fill\", (d, i) => this.color(worldData, d, i))\r\n                       .attr(\r\n                         \"fill\",\r\n                         (d, i) =>\r\n                           `rgba(38,50,56,${(1 / worldData.length) * i})`\r\n                       )\r\n                       .attr(\"stroke\", this.borderColor)\r\n                       .attr(\"stroke-width\", 0.05);\r\n                     return g;\r\n                   }\r\n                 };\r\n\r\n                 //Add Markers Function\r\n                 drawMediaPosition = (node, medias_francais) => {\r\n                   const { relations_medias_francais, countries } = this.props;\r\n                   var markers = node.append(\"g\").attr(\"class\", \"markers\");\r\n                   var media_francais_filtre = medias_francais.filter(d =>\r\n                     StringUtils.isNotEmpty(d.country)\r\n                   );\r\n                   markers\r\n                     .selectAll(\"circle\")\r\n                     .data(media_francais_filtre)\r\n                     .enter()\r\n                     .append(\"circle\")\r\n                     .attr(\"key\", d => `marker-${d.id}`)\r\n                     .attr(\"cx\", d => {\r\n                       return this.getCx(d, countries);\r\n                     })\r\n                     .attr(\"cy\", d => {\r\n                       return this.getCy(d, countries);\r\n                     })\r\n                     .attr(\"r\", d => {\r\n                       return (\r\n                         1.5 *\r\n                         this.getChildCount(d.nom, relations_medias_francais)\r\n                       );\r\n                     })\r\n                     .attr(\"fill\", d => {\r\n                       return this.getNodeColor(\r\n                         d.id,\r\n                         relations_medias_francais\r\n                       );\r\n                     })\r\n                     .attr(\"stroke\", \"#FFFFFF\")\r\n                     .attr(\"class\", \"marker\")\r\n                     .append(\"title\")\r\n                     .text(e => this.circleOnHover(e));\r\n\r\n                   return markers;\r\n                 };\r\n\r\n                 getCx = (d, countries) => {\r\n                   var country = countries.filter(\r\n                     c => c.country == d.country\r\n                   )[0];\r\n                   if (StringUtils.isNotEmpty(country)) {\r\n                     var y = country.latitude;\r\n                     var x = country.longitude;\r\n                     var coordinate = [y, x];\r\n                     return this.projection()(coordinate)[0];\r\n                   }\r\n                 };\r\n\r\n                 getCy = (d, countries) => {\r\n                   var country = countries.filter(\r\n                     c => c.country == d.country\r\n                   )[0];\r\n                   if (StringUtils.isNotEmpty(country)) {\r\n                     var x = country.latitude;\r\n                     var y = country.longitude;\r\n                     var coordinate = [x, y];\r\n                     return this.projection()(coordinate)[1];\r\n                   }\r\n                 };\r\n                 //get node color\r\n                 getNodeColor = (id, media) => {\r\n                   var childsCount = media.filter(d => d.id === id).length;\r\n                   if (childsCount == 0) {\r\n                     return \"rgba(65, 131, 215, 1)\";\r\n                   } else {\r\n                     return \"rgba(214, 69, 65, 1)\";\r\n                   }\r\n                 };\r\n\r\n                 //get child\r\n                 getChildCount = (nom, media) => {\r\n                   var childsCount = media.filter(d => d.origine == nom).length;\r\n                   if (childsCount === 0) {\r\n                     return 1;\r\n                   }\r\n                   return childsCount;\r\n                 };\r\n\r\n                 drawCnx = (g, relations, countries) => {\r\n                   //build links\r\n\r\n                   var links = this.buildLinks(relations, countries);\r\n                   this.addLinks(g, links);\r\n                 };\r\n\r\n                 //build links\r\n                 buildLinks = (relations, countries) => {\r\n                   var links = [];\r\n                   relations.forEach((d, i) => {\r\n                     var link = this.createLinkObject(d, countries);\r\n                     //add new link object\r\n                     if (this.validateLink(link)) {\r\n                       links.push(link);\r\n                     }\r\n                   });\r\n                   return links;\r\n                 };\r\n\r\n                 //create a link DTO\r\n                 createLinkObject = (d, countries) => {\r\n                   var link = {\r\n                     origine: {\r\n                       value: d.origine,\r\n                       coordinate: this.getCoordinateByEntity(\r\n                         countries,\r\n                         d.origine\r\n                       )\r\n                     },\r\n                     cible: {\r\n                       value: d.cible,\r\n                       coordinate: this.getCoordinateByEntity(\r\n                         countries,\r\n                         d.cible\r\n                       )\r\n                     },\r\n                     lien: d.valeur,\r\n                     etat: d.etat\r\n                   };\r\n                   return link;\r\n                 };\r\n                 validateLink = link => {\r\n                   var linkOrigineCoordinate = link.origine.coordinate;\r\n                   var linkCibleCoordinate = link.cible.coordinate;\r\n                   if (\r\n                     linkOrigineCoordinate != null &&\r\n                     linkOrigineCoordinate.x != \"\" &&\r\n                     linkOrigineCoordinate.y != \"\" &&\r\n                     linkCibleCoordinate != null &&\r\n                     linkCibleCoordinate.x != \"\" &&\r\n                     linkCibleCoordinate.y != \"\"\r\n                   ) {\r\n                     return true;\r\n                   }\r\n                   return false;\r\n                 };\r\n\r\n                 getCoordinateByEntity = (countries, entityName) => {\r\n                   //search for associated country \r\n                   var country = null;\r\n                   var countryFromMedia = this.state.medias_francais.filter(\r\n                     m => m.nom == entityName\r\n                   )[0];\r\n\r\n                   if (StringUtils.isNotEmpty(countryFromMedia)) {\r\n                     country = countries.filter(\r\n                       d => d.country == countryFromMedia.country\r\n                     )[0];\r\n\r\n                     if (\r\n                       country != null &&\r\n                       StringUtils.isNotEmpty(country.longitude) &&\r\n                       StringUtils.isNotEmpty(country.latitude)\r\n                     ) {\r\n                       var cx = country.longitude;\r\n                       var cy = country.latitude;\r\n                       return [cy, cx];\r\n                     }\r\n                   }\r\n                 };\r\n\r\n                 //creation de connection entre deux pays\r\n                 addLinks = (node, links) => {\r\n                   this.drawLink(node, links);\r\n                 };\r\n\r\n                 //TODO\r\n                 drawLink = (node, links) => {\r\n                   //We use this function curve instead of LineString Object to draw direct line\r\n                   var curve = context => {\r\n                     var custom = d3.curveLinear(context);\r\n                     custom._context = context;\r\n                     custom.point = function(x, y) {\r\n                       var x = +x;\r\n                       var y = +y;\r\n                       switch (this._point) {\r\n                         case 0:\r\n                           this._point = 1;\r\n                           this._line\r\n                             ? this._context.lineTo(x, y)\r\n                             : this._context.moveTo(x, y);\r\n                           this.x0 = x;\r\n                           this.y0 = y;\r\n                           break;\r\n                         case 1:\r\n                           this._point = 2;\r\n                         default:\r\n                           var x1 = this.x0 * 0.5 + x * 0.5;\r\n                           var y1 = this.y0 * 0.5 + y * 0.5;\r\n                           var m = 1 / (y1 - y) / (x1 - x);\r\n                           var r = -100; // offset of mid point.\r\n                           var k = r / Math.sqrt(1 + m * m);\r\n                           if (m == Infinity) {\r\n                             y1 += r;\r\n                           } else {\r\n                             y1 += k;\r\n                             x1 += m * k;\r\n                           }\r\n                           this._context.quadraticCurveTo(x1, y1, x, y);\r\n                           this.x0 = x;\r\n                           this.y0 = y;\r\n                           break;\r\n                       }\r\n                     };\r\n                     return custom;\r\n                   };\r\n\r\n                   //Draw a line between two points\r\n                   var line = d3\r\n                     .line()\r\n                     .x(d => {\r\n                       return this.projection()([\r\n                         d.coordinate[0],\r\n                         d.coordinate[1]\r\n                       ])[0];\r\n                     })\r\n                     .y(d => {\r\n                       return this.projection()([\r\n                         d.coordinate[0],\r\n                         d.coordinate[1]\r\n                       ])[1];\r\n                     })\r\n                     .curve(curve);\r\n\r\n                   node\r\n                     .append(\"g\")\r\n                     .attr(\"class\", \"paths\")\r\n                     .selectAll(\"path\")\r\n                     .data(links)\r\n                     .enter()\r\n                     .append(\"path\")\r\n                     .style(\"stroke\", d => this.colorPath(d))\r\n                     .style(\"stroke-width\", 0.5)\r\n                     .style(\"fill\", \"none\")\r\n                     .datum(d => {\r\n                       return [d.origine, d.cible];\r\n                     })\r\n                     .attr(\"d\", line)\r\n                     .append(\"title\")\r\n                     .text(d => d.lien);\r\n                 };\r\n\r\n                 colorPath = link => {\r\n                   switch (link.etat) {\r\n                     case \"P\":\r\n                       //Orange\r\n                       return \"rgba(242, 120, 75, 1)\";\r\n                     case \"N\":\r\n                       return \"rgba(231, 76, 60, 1)\";\r\n                     default:\r\n                       return \"rgba(65, 131, 215, 1)\";\r\n                   }\r\n                 };\r\n                 //Add zoom\r\n                 addZoom = svg => {\r\n                   svg.call(d3.zoom().on(\"zoom\", () => this.zoomed(svg)));\r\n                 };\r\n\r\n                 zoomed = svg => {\r\n                   var transform = d3.event.transform;\r\n\r\n                   svg.attr(\"transform\", transform);\r\n                 };\r\n\r\n                 //Events handlers\r\n                 circleOnHover = event => {\r\n                   return event.nom + \"\\n\" + event.country;\r\n                 };\r\n\r\n                 circleOnClick = event => {\r\n                   console.log(\"event\", event);\r\n                 };\r\n\r\n                 //Projection and path calculator\r\n                 projection() {\r\n                   var geoMercator = d3\r\n                     .geoMercator()\r\n                     .scale(100)\r\n                     .translate([800 / 2, 450 / 2]);\r\n\r\n                   var projection2 = d3\r\n                     .geoOrthographic()\r\n                     .scale(300)\r\n                     .precision(0.1);\r\n                   var projection3 = d3\r\n                     .geoConicEqualArea()\r\n                     .scale(150)\r\n                     .center([0, 33])\r\n                     //.translate([width / 2, height / 2])\r\n                     .precision(0.3);\r\n                   return geoMercator;\r\n                 }\r\n\r\n                 calculatePath = d => {\r\n                   return d3.geoPath().projection(this.projection())(d);\r\n                 };\r\n               }\r\n","import React, { Component } from \"react\";\r\nclass DorpDownView extends Component {\r\n    \r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        data : props.data,\r\n    }\r\n  }\r\n  \r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"dropdown\">\r\n        <select id=\"mySelect\" className=\"dropbtn\" onChange={e => {this.props.onChange(e.target.value);\r\n          }}\r\n        >\r\n          <option value=\"0\">All theme</option>\r\n          <option value=\"1\">Theme 1</option>\r\n          <option value=\"2\">Theme 2</option>\r\n          <option value=\"3\">Theme 3</option>\r\n          <option value=\"4\">Theme 4</option>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DorpDownView;\r\n","import React, { PureComponent } from \"react\";\r\nimport Files from \"react-butterfiles\";\r\n\r\nclass FileUpload extends PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {value: ''};\r\n    \r\n      }\r\n    \r\n  render() {\r\n    return (\r\n        <div class=\"input-group\">\r\n          <div class=\"input-group-prepend\">\r\n            <button class=\"input-group-text\" id=\"inputGroupFileAddon01\" \r\n            onClick={(e)=>this.props.onClickHandler(e)}>Upload</button>\r\n          </div>\r\n          <div class=\"custom-file\">\r\n            <input type=\"file\" class=\"custom-file-input\" id=\"inputGroupFile01\"\r\n              aria-describedby=\"inputGroupFileAddon01\" onChange={this.props.uploadFile}/>\r\n            <label class=\"custom-file-label\" for=\"inputGroupFile01\" >Choose file</label>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n  \r\n\r\n}\r\n\r\nexport default FileUpload;\r\n","import React, { Component } from \"react\";\r\nimport { feature } from \"topojson-client\";\r\nimport * as d3 from \"d3\";\r\nimport axios from 'axios';\r\nimport countries from \"./data/countries.tsv\";\r\nimport medias_francais_mock from \"./data/medias_francais_mock.tsv\";\r\nimport relations_medias_francais_mock from \"./data/relations_medias_francais.tsv\";\r\nimport MediaFrancaisView from \"./MediaFrancaisView\";\r\nimport DorpDownView from \"../Components/DropDownView\";\r\nimport FileUpload from \"../Components/FileUpload\";\r\n\r\nclass MediaFrancaisContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      //media file\r\n      medias_francais: [],\r\n      //media filtred\r\n      media_filtred: [],\r\n      //relation media\r\n      relations_medias_francais: [],\r\n      //Data for map creations\r\n      worldData: [],\r\n      jsonData: [],\r\n      countries: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"call the MediaFrancaisContainer componentDidMount\");\r\n    this.loadDataForMediaFrancais();\r\n  }\r\n\r\n  render() {\r\n    console.log(\"call render Media container\");\r\n    const {\r\n      worldData,\r\n      jsonData,\r\n      medias_francais,\r\n      media_filtred,\r\n      relations_medias_francais,\r\n      countries\r\n    } = this.state;\r\n    //If no map data or entities are empty, no need to draw the media graph.\r\n    if (worldData.length != 0 && media_filtred.length != 0) {\r\n      console.log(\"call DropDownView + MediaFrancaisView\");\r\n      return (\r\n        <div>\r\n\r\n          <FileUpload\r\n            uploadFile={e => {this.uploadFile(e);}}\r\n            onClickHandler = { e=> {this.onClickHandler(e)}}\r\n          ></FileUpload>\r\n\r\n          <DorpDownView\r\n            onChange={selected => this.changeTheme(selected)}\r\n          ></DorpDownView>\r\n\r\n          <MediaFrancaisView\r\n            worldData={worldData}\r\n            medias_francais={medias_francais}\r\n            media_filtred={media_filtred}\r\n            relations_medias_francais={relations_medias_francais}\r\n            jsonData={jsonData}\r\n            countries={countries}\r\n          ></MediaFrancaisView>\r\n        </div>\r\n      );\r\n    }\r\n    return <div></div>;\r\n  }\r\n\r\n  onClickHandler = () => {\r\n    const data = new FormData() \r\n    data.append('file', this.state.selectedFile)\r\n    console.log(\"selectedFile\",this.state.selectedFile);\r\n    axios.post(\"/upload\", data, { // receive two parameter endpoint url ,form data \r\n  })\r\n  .then(res => { // then print response status\r\n    if (res.status !== 200) {\r\n      console.log(`There was a problem: ${res.statusText}`);\r\n      return;\r\n    }\r\n    if(res.data.filename !=null){\r\n      this.readMediaFile(res.data.filename);\r\n    }    \r\n  })\r\n}\r\n\r\n  uploadFile = event => {\r\n    var file = event.target.files[0];\r\n\r\n    this.setState({\r\n      selectedFile: file,\r\n    });\r\n  };\r\n\r\n  changeTheme = theme => {\r\n    if (theme == 0) {\r\n      const media_francais = this.state.medias_francais;\r\n      this.setState({\r\n        ...this.state,\r\n        media_filtred: media_francais\r\n      });\r\n    } else {\r\n      var mediaFiltered = this.state.medias_francais.filter(\r\n        d => d.theme == theme\r\n      );\r\n      this.setState({\r\n        ...this.setState(),\r\n        media_filtred: mediaFiltered\r\n      });\r\n    }\r\n  };\r\n\r\n  loadDataForMediaFrancais() {\r\n    this.readMediaFile(medias_francais_mock);\r\n    this.readRelationFile();\r\n    this.readCountries();\r\n    this.updateWordMap();\r\n  }\r\n\r\n  readMediaFile = data => {\r\n    d3.tsv(data).then(response => {\r\n      this.setState({\r\n        medias_francais: response,\r\n        media_filtred: response\r\n      });\r\n    });\r\n  };\r\n\r\n  readRelationFile = () => {\r\n    d3.tsv(relations_medias_francais_mock).then(response => {\r\n      this.setState({\r\n        relations_medias_francais: response\r\n      });\r\n    });\r\n  };\r\n\r\n  readCountries = () => {\r\n    d3.tsv(countries).then(response => {\r\n      this.setState({\r\n        countries: response\r\n      });\r\n    });\r\n  };\r\n\r\n  updateWordMap() {\r\n    fetch(\r\n      \"https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/countries-10m.json\"\r\n    ).then(response => {\r\n      if (response.status !== 200) {\r\n        console.log(`There was a problem: ${response.status}`);\r\n        return;\r\n      }\r\n      response.json().then(worldData => {\r\n        this.setState({\r\n          worldData: feature(worldData, worldData.objects.countries).features,\r\n          jsonData: worldData\r\n        });\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default MediaFrancaisContainer;\r\n","import React, { Component } from \"react\";\nimport MediaFrancaisContainer from \"./MediaFrancais/MediaFrancaisContainer\";\n\n\n\nexport default class App extends Component {\n  \n                 constructor(props) {\n                   super(props);                  \n                 }\n\n                 render() { \n                   console.log(\"call App render\");\n                   return(  \n                   <MediaFrancaisContainer></MediaFrancaisContainer>               \n                   )\n                }                \n               } ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/countries.9f4f5047.tsv\";","module.exports = __webpack_public_path__ + \"static/media/medias_francais_mock.d6786590.tsv\";","module.exports = __webpack_public_path__ + \"static/media/relations_medias_francais.d49ff9ff.tsv\";"],"sourceRoot":""}